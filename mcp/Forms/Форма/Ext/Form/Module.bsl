
&НаКлиенте
Процедура Обучить(Команда)
	
	ОбучитьБезКонтекста();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбучитьБезКонтекста()
	
	КоличествоКлассов = 2;
	КоличествоПримеров = 3;
	КоличествоИзмерений = 2;
	
	ТренировочнаяВыборка = Новый Массив(КоличествоПримеров, КоличествоИзмерений + 1); // Одно измерение добавлено для смещения
	
	// Три точки в двухмерном пространстве
	// [
	//    [1.40, 1.26],
	//    [3.34, 2.14],
	//    [0.68, 2.08],
	// ]
	
	ТренировочнаяВыборка[0][0] = 1.40;
	ТренировочнаяВыборка[0][1] = 1.26;
	
	ТренировочнаяВыборка[1][0] = 3.34;
	ТренировочнаяВыборка[1][1] = 2.14;
	
	ТренировочнаяВыборка[2][0] = 0.68;
	ТренировочнаяВыборка[2][1] = 2.08;
	
	// Смещение
	Для Каждого Элемент Из ТренировочнаяВыборка Цикл
		Элемент[2] = 1.0;
	КонецЦикла;
	
	ТренировочныеКлассы = Новый Массив(КоличествоПримеров);
	
	// Два класса для трех точек
	// [0, 1, 1]
	
	ТренировочныеКлассы[0] = 0;
	ТренировочныеКлассы[1] = 1;
	ТренировочныеКлассы[2] = 1;
	
	Веса = Новый Массив(КоличествоКлассов, КоличествоИзмерений + 1); // Одно измерение добавлено для смещения
	
	Веса[0][0] = 0.0;
	Веса[0][1] = 0.0;
	Веса[0][2] = 0.0;
	
	Веса[1][0] = 0.0;
	Веса[1][1] = 0.0;
	Веса[1][2] = 0.0;
	
	Для Эпоха = 1 По 100 Цикл
		Для Индекс = 0 По ТренировочнаяВыборка.Количество() - 1 Цикл
			ПодстроитьВеса(Веса, ТренировочнаяВыборка[Индекс], ТренировочныеКлассы[Индекс]);	
		КонецЦикла;
		Точность = Точность(Веса, ТренировочнаяВыборка, ТренировочныеКлассы);
		Сообщить(СтрШаблон("Эпоха %1; Точность %2%%", Эпоха, Окр(Точность * 100, 2)));
		Если Точность = 1.0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Точность(Веса, ТренировочнаяВыборка, ТренировочныеКлассы)
	КоличествоПравильныхПредсказаний = 0;
	Для Индекс = 0 По ТренировочнаяВыборка.Количество() - 1 Цикл
		Если ПредсказатьКласс(Веса, ТренировочнаяВыборка[Индекс]) = ТренировочныеКлассы[Индекс] Тогда
			КоличествоПравильныхПредсказаний = КоличествоПравильныхПредсказаний + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоПравильныхПредсказаний / ТренировочнаяВыборка.Количество()
КонецФункции

#Область МультиклассовыйПерцептрон

&НаКлиентеНаСервереБезКонтекста
Функция ПодстроитьВеса(Веса, Вектор, Класс) Экспорт
	ПредсказанныйКласс = ПредсказатьКласс(Веса, Вектор);
	Если ПредсказанныйКласс <> Класс Тогда
		ВесаПравильногоКласса = Веса[Класс];
		ВесаПредсказанногоКласса = Веса[ПредсказанныйКласс];
		Для Индекс = 0 По Вектор.Количество() - 1 Цикл
			ВесаПравильногоКласса[Индекс] = ВесаПравильногоКласса[Индекс] + Вектор[Индекс];
			ВесаПредсказанногоКласса[Индекс] = Макс(0, ВесаПредсказанногоКласса[Индекс] - Вектор[Индекс] / 2);
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредсказатьКласс(Веса, Вектор) Экспорт
	МаксимальныйИндекс = 0;
	МаксимальныйОтклик = 0;
	Для Индекс = 0 По Веса.Количество() - 1 Цикл
		Отклик = СкалярноеПроизведение(Веса[Индекс], Вектор);
		Если Отклик > МаксимальныйОтклик Тогда
			МаксимальныйИндекс = Индекс;
			МаксимальныйОтклик = Отклик;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйИндекс;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СкалярноеПроизведение(Вектор1, Вектор2)
	Сумма = 0;
	Для Индекс = 0 По Вектор1.Количество() - 1 Цикл
		Сумма = Сумма + Вектор1[Индекс] * Вектор2[Индекс];
	КонецЦикла;
	Возврат Сумма;
КонецФункции

#КонецОбласти // МультиклассовыйПерцептрон
